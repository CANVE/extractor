< definition from source file: /repos/canve/extractor/compiler-plugin-unit-test-lib/src/main/scala/injectable/injectableCompiler.scala >

object InjectingCompilerFactory {

  private lazy val runTimeScalaVersion: String = {
    val versionString = scala.util.Properties.versionString 
    
    versionString.take("version ".length) match {
      case "version " => versionString.drop("version ".length) 
      case _ => throw new Exception("Could not obtain scala runtime version. Are you running scala 2.9 or older?")
    }
  }
    
  private val ShortScalaVersion = runTimeScalaVersion.dropRight(2)

  private def classPath = getScalaJars.map(_.getAbsolutePath) // :+ sbtCompileDir.getAbsolutePath // :+ runtimeClasses.getAbsolutePath

  private def getScalaJars: List[File] = {
    val scalaJars = List("scala-compiler", "scala-library", "scala-reflect")
    scalaJars.map(findScalaJar)
  }

  private def sbtCompileDir: File = {
    val dir = new File("./target/scala-" + ShortScalaVersion + "/classes")
    if (!dir.exists)
      throw new FileNotFoundException(s"Could not locate SBT compile directory for plugin files [$dir]")
    dir
  }

  // private def runtimeClasses: File = new File("./scalac-scoverage-runtime/target/scala-2.11/classes")

  private def findScalaJar(artifactId: String): File = findIvyJar("org.scala-lang", artifactId, runTimeScalaVersion)

  private def findIvyJar(groupId: String, artifactId: String, version: String): File = {
    val userHome = System.getProperty("user.home")
    val sbtHome = userHome + "/.ivy2"
    val jarPath = sbtHome + "/cache/" + groupId + "/" + artifactId + "/jars/" + artifactId + "-" + version + ".jar"
    val file = new File(jarPath)
    if (!file.exists)
      throw new FileNotFoundException(s"Could not locate [$jarPath].")
    file
  }
  
  def apply(unitTestObj: Injectable): InjectingCompiler = {
    
    def settings: Settings = {
      val s = new scala.tools.nsc.Settings
      s.classpath.value = classPath.mkString(File.pathSeparator)
  
      val path = s"./target/scala-$ShortScalaVersion/test-generated-classes"
      new File(path).mkdirs()
      s.d.value = path
      s
    }
    
    val reporter = new scala.tools.nsc.reporters.ConsoleReporter(settings)
    
    new InjectingCompiler(settings, reporter, unitTestObj)
  }
}
